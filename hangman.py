# -*- coding: utf-8 -*-
"""hangman.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18rBX5BS36cOi0PmswqWGVRLTS36GvJD_
"""

# pip install random-word

from random_word import RandomWords
import random, re, time

rw = RandomWords()
blueprint_folder = "hangman"
blueprint_file = {
    0 : "/legs.txt",
    1 : "/arms.txt",
    2 : "/body.txt",
    3 : "/head.txt",
    4 : "/gallows.txt"
}

def choose_word():
    # Return a single random word
    word = rw.get_random_word(hasDictionaryDef = "true", includePartOfSpeech = "noun,verb", minLength = 5, maxLength = 15)
    return word.upper()

def draw_man(b_folder, b_file, num_retries = 4):
    draw_file = b_folder + b_file[num_retries]
    
    with open(draw_file, 'r') as current_file:
        print(current_file.read())

def start_game(num_players):
    word = choose_word()
    word_list = ["_" if word[i].isalpha() else word[i] for i in range(len(word)) ]
    num_retries = 4
    players = {
        1 : {
            'name' : "Player 1",
            'letter' : "",
            'num_retries' : num_retries,
            'word_list' : word_list
        },
        2 : {
            'name' : "Player 2" if num_players > 1 else "Computer",
            'letter' : "",
            'num_retries' : num_retries,
            'word_list' : word_list
        }
    }

    return word, players

def check_letter(letter, word, w_list):
    pass_counter = 0
    temp_w_list = w_list.copy()
    for i, v in enumerate(word):
        if temp_w_list[i] != "_" or letter != v:
            continue
        elif temp_w_list[i] == "_" and letter == v:
            temp_w_list[i] = v
            pass_counter += 1

    return {
        "w_list" : temp_w_list,
        "pass_counter" : pass_counter
    }

def gen_letter():
    letter = chr(random.randint(ord('A'), ord('Z')))
    return letter

def check_winner(players):
    winner = None
    player_1 = players[1]
    player_2 = players[2]

    # Check number of retries
    if player_1['num_retries'] == 0 or player_2['num_retries'] == 0:
        winner = 1 if player_1['num_retries'] > player_2['num_retries'] else 2 if player_1['num_retries'] < player_2['num_retries'] else 0
    
    # Check number of spaces left
    elif player_1['word_list'].count("_") == 0 or player_2['word_list'].count("_") == 0:
        winner = 1 if player_1['word_list'].count("_") < player_2['word_list'].count("_") else 2 if player_1['word_list'].count("_") > player_2['word_list'].count("_") else 0

    return winner

def main():
    print("Hello! Welcome to Hangman.\n=========================")
    num_players = input("1 or 2 Players? Type '0' to quit... : ")
    while True:
        if not num_players.isnumeric():
            num_players = input("Um...1 or 2 Players? : ")
        elif int(num_players) > 2:
            num_players = input("Um...1 or 2 Players? : ")
        else:
            break
    
    num_players = int(num_players)
    if num_players == 0:
        print("Goodbye!")
        return None
    else:
        print(chr(27) + "[2J")
    
    word, players = start_game(num_players)
    print(word)
    print("Let's start the game!\n~~~~~~~~~~~~~~~~~")
    draw_man(blueprint_folder, blueprint_file)
    print("~~~~~~~~~~~~~~~~~")
    word_length = len(word) if re.search("[-'\s]+", word) is False else len(word) - len(re.findall("[-'\s]+", word))
    print("This word has {} letters.".format(word_length))

    turn = 1
    play = True

    while play:
        while True:
            print("\nIt's {}'s turn!\n==================".format(players[turn]['name']))
            print(*players[turn]['word_list'], sep=" ")
            choose_letter = input("Choose a letter : ")
            while True:
                if not choose_letter.isalpha() or len(choose_letter) != 1:
                    choose_letter = input("Only alphabets! Choose a letter : ")
                    continue
                else:
                    players[turn]['letter'] = choose_letter.upper()
                    break
            
            turn = 2 if turn == 1 else 1
            if num_players == 1 and turn == 2:
                print("\n{}'s turn!\n==================".format(players[turn]['name']))
                print(*players[turn]['word_list'], sep=" ")
                players[turn]['letter'] = gen_letter()
                print("Beep Boop...I'm thinking...")
                time.sleep(1)
                print("A-ha! I choose {}.".format(players[turn]['letter']))
                time.sleep(0.5)
                turn = 1
                break
            elif num_players == 2 and turn == 2:
                continue
            else:
                break
        
        print(chr(27) + "[2J")
        temp_players = players.copy()
        p1_results = check_letter(temp_players[1]['letter'], word, temp_players[1]['word_list'])
        p2_results = check_letter(temp_players[2]['letter'], word, temp_players[2]['word_list'])

        players[1]['word_list'] = p1_results['w_list']
        players[2]['word_list'] = p2_results['w_list']

        print("Let's see what's hangin'!\n=========================")
        if p1_results['pass_counter'] == 0:
            players[1]['num_retries'] -= 1
            print("{}'s Gallows".format(players[1]['name']))
            draw_man(blueprint_folder, blueprint_file, players[1]['num_retries'])
            print("\n~~~~~~~~~~~~~~\n")

        if p2_results['pass_counter'] == 0:
            players[2]['num_retries'] -= 1
            print("{}'s Gallows".format(players[2]['name']))
            draw_man(blueprint_folder, blueprint_file, players[2]['num_retries'])
            print("\n~~~~~~~~~~~~~~\n")

        if p1_results['pass_counter'] > 0 and p2_results['pass_counter'] > 0:
            print("Nothing new. You're both safe!\n")

        winner = check_winner(players)
        if winner is not None:
            if winner != 0:
                print("We have a winner! It's {}!".format(players[winner]['name']))
            else:
                print("We have a tie!")
            break
        else:
            replay = input("Continue?(Y/N) : ")
            if not replay.isalpha() or replay.upper() != "N":
                continue
            else:             
                break

if __name__ == "__main__":
    main()
    print("Thanks for playing!")

# pip freeze > requirements.txt